<% if ( typeof graph !== 'object') { %>
  <b>Error: Empty Matrix</b>
<% } else {
  // console.log(graph.relationsObject)
  const _description = typeof description === 'string' ? description: ''
  const _colored = typeof colored === 'boolean' ? colored: 'false'
  const matrix = graph.booleanMatrix
  const overallWidth = typeof width === 'number' ? width : 100
  const squareSize = Math.floor(overallWidth / matrix.length)
  const yOffset = m => m * squareSize
  const xOffset = n => n * squareSize
  const halfLength = Math.floor(matrix.length / 2)
  // console.log({halfLength})
  /* function elementNumbering (k) {
    if (k >= halfLength) {
      return k - halfLength + 1
    } else {
      return k - halfLength
    }
  } */
  %>
  <div class="graph-container" data-matrix="<%= JSON.stringify(matrix) %>" data-colored="<%= _colored %>">
    <div><%= colored ? 'Colored' : 'Uncolored' %> matrix representation of:</div>
    <div>"<%= graph.name %>"</div>
    <svg viewBox="-<%= squareSize %> -<%=squareSize %> <%= overallWidth + squareSize %> <%= overallWidth + squareSize %>" 
         class="sparse-matrix"
         style="height: <%= overallWidth + 1 %>px; width:<%= overallWidth %>px;margin-bottom:20px;" >
         <% for (let i = 0; i < matrix.length; i++) { // i for columns, print column label %>
          <text y="-<%= squareSize / 4 %>" 
                x="<%= xOffset(i) + squareSize / 3 %>" 
                font-size="<%= squareSize * 0.6 %>px" 
                fill="black"><%- i %></text>
         <% } %> 
         <% for (let j = 0; j < matrix.length; j++) { // j for rows, print row label %>
                <text y="<%= yOffset(j + 1) - squareSize / 3 %>" 
                      x="-<%= squareSize / 1.8 %>" 
                      font-size="<%= squareSize * 0.6 %>px" 
                      fill="black"><%- j %></text>
          <%
              for (let i = 0; i < matrix[j].length; i++) { // columns
                const value = matrix[j][i]
                let color = 'white'
                if (value === true) {
                  color = 'grey'
                  if ( colored ) {
                    if ( elementNumbering(j) > 0) color = 'red'
                    if ( elementNumbering(j) < 0) color = 'blue'
                  }
                  if (matrix[i][j] === true) color = 'black'
                }
                
                %>
                <rect y="<%= yOffset(j) %>" 
                      x="<%= xOffset(i) %>" 
                      width="<%= squareSize %>" 
                      height="<%= squareSize %>" 
                      stroke="<%= color === 'black' ? 'dimgrey' : 'black' %>"
                      fill="<%= color %>"></rect>
            <% }
            } %>
    </svg>
    <div style="color:white;background-color:black;padding:5px;line-height: 2;">Black cells balanced relationship</div>
    <% if (colored) { %>
      <div style="color:white;background-color:red;padding:5px;line-height: 2;">Female flavored action</div>
      <div style="color:white;background-color:blue;padding:5px;line-height: 2;">Male flavored action</div>
    <% } else { %>
      <div style="color:white;background-color:grey;padding:5px;line-height: 2;border:1px solid black;">Grey cells unbalanced relationship</div>
    <% } %>
    <div style="color:black;background-color:white;padding:5px;line-height: 2;border:1px solid black;margin-bottom:20px;">White cells represent no relationship</div>
    <div class="cytoscape-visualization" style="height: <%= 1.5 * overallWidth %>px; width:<%= 1.5 * overallWidth %>px;display:none;border:1px solid black;"></div>
    <button type="button" style="margin-top:20px;">Render As Wireframe</button>
    <input type="text" hidden value="" name="imageSrc"/>
    <% if (process.env.NODE_ENV === 'local') { %> 
      <button type="submit" name="saveImage" style="display:none;" class="pull-right">Update Image</button>
    <% } %>
  </div>
<% } %>
